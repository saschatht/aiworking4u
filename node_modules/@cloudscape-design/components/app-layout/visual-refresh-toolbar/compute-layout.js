// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { SPLIT_PANEL_MIN_WIDTH } from '../split-panel';
export function computeHorizontalLayout({ navigationOpen, navigationWidth, placement, minContentWidth, activeDrawerSize, splitPanelOpen, splitPanelPosition, splitPanelSize, }) {
    const contentPadding = 2 * 24; // space-xl
    const activeNavigationWidth = navigationOpen ? navigationWidth : 0;
    const resizableSpaceAvailable = Math.max(0, placement.inlineSize - minContentWidth - contentPadding - activeNavigationWidth);
    const splitPanelForcedPosition = resizableSpaceAvailable - activeDrawerSize < SPLIT_PANEL_MIN_WIDTH;
    const resolvedSplitPanelPosition = splitPanelForcedPosition ? 'bottom' : splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : 'bottom';
    const sideSplitPanelSize = resolvedSplitPanelPosition === 'side' && splitPanelOpen ? splitPanelSize !== null && splitPanelSize !== void 0 ? splitPanelSize : 0 : 0;
    const maxSplitPanelSize = resizableSpaceAvailable - activeDrawerSize;
    const maxDrawerSize = resizableSpaceAvailable - sideSplitPanelSize;
    return {
        splitPanelPosition: resolvedSplitPanelPosition,
        splitPanelForcedPosition,
        sideSplitPanelSize,
        maxSplitPanelSize,
        maxDrawerSize,
    };
}
export function computeVerticalLayout({ topOffset, hasToolbar, toolbarHeight, stickyNotifications, notificationsHeight, }) {
    const toolbar = topOffset;
    let notifications = topOffset;
    if (hasToolbar) {
        notifications += toolbarHeight;
    }
    let header = notifications;
    if (stickyNotifications) {
        header += notificationsHeight;
    }
    return { toolbar, notifications, header };
}
//# sourceMappingURL=compute-layout.js.map