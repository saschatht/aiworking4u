import { AppLayoutPropsWithDefaults } from '../interfaces';
interface HorizontalLayoutInput {
    navigationOpen: boolean;
    navigationWidth: number;
    placement: AppLayoutPropsWithDefaults['placement'];
    minContentWidth: number;
    activeDrawerSize: number;
    splitPanelOpen: boolean;
    splitPanelPosition: 'side' | 'bottom' | undefined;
    splitPanelSize: number;
}
export declare function computeHorizontalLayout({ navigationOpen, navigationWidth, placement, minContentWidth, activeDrawerSize, splitPanelOpen, splitPanelPosition, splitPanelSize, }: HorizontalLayoutInput): {
    splitPanelPosition: "bottom" | "side";
    splitPanelForcedPosition: boolean;
    sideSplitPanelSize: number;
    maxSplitPanelSize: number;
    maxDrawerSize: number;
};
interface VerticalLayoutInput {
    topOffset: number;
    hasToolbar: boolean;
    toolbarHeight: number;
    stickyNotifications: boolean;
    notificationsHeight: number;
}
export interface VerticalLayoutOutput {
    toolbar: number;
    notifications: number;
    header: number;
}
export declare function computeVerticalLayout({ topOffset, hasToolbar, toolbarHeight, stickyNotifications, notificationsHeight, }: VerticalLayoutInput): VerticalLayoutOutput;
export {};
//# sourceMappingURL=compute-layout.d.ts.map