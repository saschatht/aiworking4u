// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import clsx from 'clsx';
import customCssProps from '../../../internal/generated/custom-css-properties';
import testutilStyles from '../../test-classes/styles.css.js';
import styles from './styles.css.js';
const contentTypeCustomWidths = ['dashboard', 'cards', 'table'];
export function SkeletonLayout({ style, notifications, contentHeader, content, navigation, navigationOpen, navigationWidth, tools, toolsOpen, toolsWidth, toolbar, sideSplitPanel, bottomSplitPanel, splitPanelOpen, placement, contentType, maxContentWidth, disableContentPaddings, }) {
    const isMaxWidth = maxContentWidth === Number.MAX_VALUE || maxContentWidth === Number.MAX_SAFE_INTEGER;
    const anyPanelOpen = navigationOpen || toolsOpen;
    return (React.createElement("div", { className: clsx(styles.root, testutilStyles.root, {
            [styles['has-adaptive-widths-default']]: !contentTypeCustomWidths.includes(contentType),
            [styles['has-adaptive-widths-dashboard']]: contentType === 'dashboard',
        }), style: {
            minBlockSize: `calc(100vh - ${placement.insetBlockStart}px - ${placement.insetBlockEnd}px)`,
            [customCssProps.maxContentWidth]: isMaxWidth ? '100%' : maxContentWidth ? `${maxContentWidth}px` : '',
            [customCssProps.navigationWidth]: `${navigationWidth}px`,
            [customCssProps.toolsWidth]: `${toolsWidth}px`,
        } },
        navigation && (React.createElement("div", { className: clsx(styles.navigation, !navigationOpen && styles['panel-hidden'], toolsOpen && styles['unfocusable-mobile']) }, navigation)),
        toolbar,
        React.createElement("main", { className: clsx(styles['main-landmark'], anyPanelOpen && styles['unfocusable-mobile']) },
            notifications,
            React.createElement("div", { className: clsx(styles.main, { [styles['main-disable-paddings']]: disableContentPaddings }), style: style },
                contentHeader && React.createElement("div", { className: styles['content-header'] }, contentHeader),
                React.createElement("div", { className: testutilStyles.content }, content)),
            bottomSplitPanel && (React.createElement("div", { className: clsx(styles['split-panel-bottom'], !splitPanelOpen && styles['split-panel-hidden']), style: { insetBlockEnd: placement.insetBlockEnd } }, bottomSplitPanel))),
        sideSplitPanel && (React.createElement("div", { className: clsx(styles['split-panel-side'], !splitPanelOpen && styles['panel-hidden']) }, sideSplitPanel)),
        tools && React.createElement("div", { className: clsx(styles.tools, !toolsOpen && styles['panel-hidden']) }, tools)));
}
//# sourceMappingURL=index.js.map