// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useRef } from 'react';
import clsx from 'clsx';
import { InternalButton } from '../../../button/internal';
import styles from './styles.css.js';
import sharedStyles from '../../styles.css.js';
import testutilStyles from '../../test-classes/styles.css.js';
import { TOOLS_DRAWER_ID } from '../../utils/use-drawers';
import PanelResizeHandle from '../../../internal/components/panel-resize-handle';
import { createWidgetizedComponent } from '../../../internal/widgets';
import { useResize } from './use-resize';
export function AppLayoutDrawerImplementation({ appLayoutInternals }) {
    var _a, _b, _c, _d;
    const { activeDrawer, minDrawerSize, activeDrawerSize, maxDrawerSize, ariaLabels, drawers, drawersFocusControl, isMobile, placement, onActiveDrawerChange, onActiveDrawerResize, } = appLayoutInternals;
    const drawerRef = useRef(null);
    const activeDrawerId = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    const computedAriaLabels = {
        closeButton: activeDrawer ? (_a = activeDrawer.ariaLabels) === null || _a === void 0 ? void 0 : _a.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
        content: activeDrawer ? (_b = activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools,
    };
    const isToolsDrawer = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) === TOOLS_DRAWER_ID;
    const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;
    const toolsContent = (_c = drawers === null || drawers === void 0 ? void 0 : drawers.find(drawer => drawer.id === TOOLS_DRAWER_ID)) === null || _c === void 0 ? void 0 : _c.content;
    const resizeProps = useResize({
        currentWidth: activeDrawerSize,
        minWidth: minDrawerSize,
        maxWidth: maxDrawerSize,
        panelRef: drawerRef,
        handleRef: drawersFocusControl.refs.slider,
        onResize: size => onActiveDrawerResize({ id: activeDrawerId, size }),
    });
    return (React.createElement("aside", { id: activeDrawerId, "aria-hidden": !activeDrawer, "aria-label": computedAriaLabels.content, className: clsx(styles.drawer, sharedStyles['with-motion'], {
            [testutilStyles['active-drawer']]: !toolsOnlyMode && activeDrawerId,
            [testutilStyles.tools]: isToolsDrawer,
        }), ref: drawerRef, onBlur: e => {
            if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
                drawersFocusControl.loseFocus();
            }
        }, style: {
            blockSize: `calc(100vh - ${placement.insetBlockStart}px - ${placement.insetBlockEnd}px)`,
            insetBlockStart: placement.insetBlockStart,
        } },
        !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && (React.createElement(PanelResizeHandle, { ref: drawersFocusControl.refs.slider, position: "side", className: testutilStyles['drawers-slider'], ariaLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.resizeHandle, ariaValuenow: resizeProps.relativeSize, onKeyDown: resizeProps.onKeyDown, onPointerDown: resizeProps.onPointerDown })),
        React.createElement("div", { className: styles['drawer-content-container'] },
            React.createElement("div", { className: clsx(styles['drawer-close-button']) },
                React.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx({
                        [testutilStyles['active-drawer-close-button']]: !isToolsDrawer && activeDrawerId,
                        [testutilStyles['tools-close']]: isToolsDrawer,
                    }), formAction: "none", iconName: isMobile ? 'close' : 'angle-right', onClick: () => onActiveDrawerChange(null), ref: drawersFocusControl.refs.close, variant: "icon" })),
            toolsContent && (React.createElement("div", { className: clsx(styles['drawer-content'], activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden']) }, toolsContent)),
            activeDrawerId !== TOOLS_DRAWER_ID && React.createElement("div", { className: styles['drawer-content'] }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content))));
}
export const createWidgetizedAppLayoutDrawer = createWidgetizedComponent(AppLayoutDrawerImplementation);
//# sourceMappingURL=index.js.map